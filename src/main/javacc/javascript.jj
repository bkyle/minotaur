// TODO: Full Unicode Support
// TODO: Regular Expressions
// TODO: Semicolon insertion (sec 7.9)

options
{
	STATIC = false;
	UNICODE_INPUT = true;
	LOOKAHEAD = 3;
}

PARSER_BEGIN(JavascriptParser)

class JavascriptParser
{

	public static void main(String args[]) throws Throwable
	{
		try
		{
			new JavascriptParser(System.in).SourceElements();
			System.out.println("ok");
			System.exit(0);
		}
		catch (Throwable t)
		{
			System.err.println(t.getMessage());
			System.exit(1);
		}
	}

	private void log(String msg)
	{
		System.out.println(msg);
	}

}

PARSER_END(JavascriptParser)

/*
 * Whitespace
 */

SKIP : 
{
	< [ "\t", /*"\v", "\f",*/ " ", "\r", "\n" ] >
}

/*
 * Comments
 */

SKIP : 
{
	< "//" (~["\n","\r"])* >
}

SKIP :
{
	"/*" : COMMENT
}

<COMMENT> SKIP :
{
	"*/" : DEFAULT
}

<COMMENT> SKIP : 
{
	< ~[] >
}

/*
 * Reserved Words
 */

TOKEN : 
{
	< ABSTRACT : "abstract" > |
	< AS : "as" > |
	< BOOLEAN : "boolean" > |
	< BREAK : "break" > |
	< BYTE : "byte" > |
	< CASE : "case" > |
	< CATCH : "catch" > |
	< CHAR : "char" > |
	< CLASS : "class" > |
	< CONTINUE : "continue" > |
	< CONST : "const" > |
	< DEBUGGER : "debugger" > |
	< _DEFAULT : "default" > |
	< DELETE : "delete" > |
	< DO : "do" > |
	< DOUBLE : "double" > |
	< ELSE : "else" > |
	< ENUM : "enum" > |
	< EXPORT : "export" > |
	< EXTENDS : "extends" > |
	< FALSE : "false" > |
	< FINAL : "final" > |
	< FINALLY : "finally" > |
	< FLOAT : "float" > |
	< FOR : "for" > |
	< FUNCTION : "function" > |
	< GOTO : "goto" > |
	< IF : "if" > |
	< IMPLEMENTS : "implements" > |
	< IMPORT : "import" > |
	< IN : "in" > |
	< INSTANCEOF : "instanceof" > |
	< INT : "int" > |
	< INTERFACE : "interface" > |
	< IS : "is" > |
	< LONG : "long" > |
	< NAMESPACE : "namespace" > |
	< NATIVE : "native" > |
	< NEW : "new" > |
	< NULL : "null" > |
	< PACKAGE : "package" > |
	< PRIVATE : "private" > |
	< PROTECTED : "protected" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< SHORT : "short" > |
	< STATIC : "static" > |
	< SUPER : "super" > |
	< SWITCH : "switch" > |
	< SYNCHRONIZED : "synchronized" > |
	< THIS : "this" > |
	< THROW : "throw" > |
	< THROWS : "throws" > |
	< TRANSIENT : "transient" > |
	< TRUE : "true" > |
	< TRY : "try" > |
	< TYPEOF : "typeof" > |
	< USE : "use" > |
	< VAR : "var" > |
	< VOID : "void" > |
	< VOLATILE : "volatile" > |
	< WHILE : "while" > |
	< WITH : "with" >
}

/*
 * Operators
 */

TOKEN :
{
	< DOT : "." > |
	< PLUS : "+" > |
	< MINUS : "-" > |
	< MULT : "*" > |
	< DIV : "/" > |
	< MOD : "%" > |
	< INC : "++" > |
	< DEC : "--" > |
	< ASSIGN : "=" > |
	< PLUS_ASSIGN : "+=" > |
	< MINUS_ASSIGN : "-=" > |
	< MULT_ASSIGN : "*=" > |
	< DIV_ASSIGN : "/=" > |
	< MOD_ASSIGN : "%=" > |
	< LSHIFT_ASSIGN : "<<=" > |
	< RSHIFT_ASSIGN : ">>=" > |
	< URSHIFT_ASSIGN : ">>>=" > |
	< BAND_ASSIGN : "&=" > |
	< BOR_ASSIGN : "|=" > |
	< XOR_ASSIGN : "^=" > |
	< EQUAL : "==" > |
	< EEQUAL : "===" > |
	< NOT_EQUAL : "!=" > |
	< NOT_EEQUAL : "!==" > |
	< LT : "<" > |
	< GT : ">" > |
	< LTE : "<=" > |
	< GTE : ">=" > |	
	< BAND : "&" > |
	< AND : "&&" > |
	< BOR : "|" > |
	< OR : "||" > |
	< XOR : "^" > |
	< BNOT : "~" > |
	< NOT : "!" > |
	< LPAREN : "(" > |
	< RPAREN : ")" > |
	< LBRACKET : "[" > |
	< RBRACKET : "]" > |
	< LBRACE : "{" > |
	< RBRACE : "}" > |
	< QUESTION : "?" > |
	< COLON : ":" > |
	< SEMICOLON : ";" > |
	< LSHIFT : "<<" > |
	< RSHIFT : ">>" > |
	< URSHIFT : ">>>" > |
	< COMMA : "," >
}

/*
 * Complex Tokens
 */

TOKEN :
{

	// Identifiers
	< IDENTIFIER : <IDENTIFIER_START> (<IDENTIFIER_START> | <IDENTIFIER_CHAR>)* > |
	< #IDENTIFIER_START : ( [ "$","_","A"-"Z","a"-"z" ] )> |
	< #IDENTIFIER_CHAR : ( [ "$","_","A"-"Z","a"-"z","0"-"9" ] ) >  |

	// Numeric Literals
	< DECIMAL_LITERAL : (
		<DECIMAL_INTEGER_LITERAL> <DOT> (<DECIMAL_DIGITS>)? (<EXPONENT_PART>)? | 
		<DOT> <DECIMAL_DIGITS> (<EXPONENT_PART>)? |
		<DECIMAL_INTEGER_LITERAL> (<EXPONENT_PART>)? ) > |
	
	< #DECIMAL_INTEGER_LITERAL : ( "0" | <NON_ZERO_DIGIT> (<DECIMAL_DIGITS>)? ) > |
	< #DECIMAL_DIGITS : ( <DECIMAL_DIGIT> )+ > |
	< #DECIMAL_DIGIT : ( [ "0"-"9" ] ) > |
	< #NON_ZERO_DIGIT : ( [ "1"-"9" ] ) > |
	< #EXPONENT_PART : ( <EXPONENT_INDICATOR> <SIGNED_INTEGER> ) > |
	< #EXPONENT_INDICATOR : ( "e" | "E" ) > |
	< #SIGNED_INTEGER : ( <DECIMAL_DIGITS> | <PLUS> <DECIMAL_DIGITS> | <MINUS> <DECIMAL_DIGITS> ) > |

	< HEX_INTEGER_LITERAL : ( ( "0x" | "0X") ( <HEX_DIGIT> )+ ) > |
	< #HEX_DIGIT : ( [ "0"-"9", "a"-"f", "A"-"F" ] ) > |


	// String Literals
	< STRING_LITERAL : ( "\"" <DOUBLE_QUOTED_STRING_CHARS> "\"" | "'" <SINGLE_QUOTED_STRING_CHARS> "'" ) > |
	< #DOUBLE_QUOTED_STRING_CHARS : ( <DOUBLE_QUOTED_STRING_CHAR> | <ESCAPE_SEQUENCE> )* > |
	< #DOUBLE_QUOTED_STRING_CHAR : ( ~["\\", "\"", "\r", "\n"] ) > |

	< #SINGLE_QUOTED_STRING_CHARS : ( <SINGLE_QUOTED_STRING_CHAR> | <ESCAPE_SEQUENCE> )* > |
	< #SINGLE_QUOTED_STRING_CHAR : ( ~["\\", "'", "\r", "\n"] ) > |

	< #ESCAPE_SEQUENCE : ( "\\" ( <CHARACTER_ESCAPE_SEQUENCE> | <HEX_ESCAPE_SEQUENCE> | <UNICODE_ESCAPE_SEQUENCE> ) ) > |
	< #CHARACTER_ESCAPE_SEQUENCE : ( <SINGLE_ESCAPE_CHARACTER> | <HEX_ESCAPE_SEQUENCE> | <UNICODE_ESCAPE_SEQUENCE> ) > |
	< #SINGLE_ESCAPE_CHARACTER : ["'", "\"", "\\", "b", "f", "n", "r", "t", "v"] > |
	< #HEX_ESCAPE_SEQUENCE : ( "x" <HEX_DIGIT> <HEX_DIGIT> ) > |
	< #UNICODE_ESCAPE_SEQUENCE: ( "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> ) > |

	// Regex Literals
	// TODO: Revisit when refactoring lexemes for unicode.
	< REGEX_LITERAL : ("/" <REGEX_BODY> "/" ( <REGEX_FLAGS> )? ) > |
	< #REGEX_BODY : ( <REGEX_FIRST_CHAR> <REGEX_CHARS> ) > |
	< #REGEX_CHARS : ( <REGEX_CHAR> )* > |
	< #REGEX_FIRST_CHAR : ( ~["\r", "\n", "*", "/", "\\"] | <BACKSLASH_SEQUENCE> ) > |
	< #REGEX_CHAR : ( ~[ "\r", "\n", "/", "\\" ] | <BACKSLASH_SEQUENCE> ) > |
	< #BACKSLASH_SEQUENCE : ("\\" ~[ "\r", "\n"] ) > |
	< #REGEX_FLAGS : ( <IDENTIFIER_CHAR> )* >
	
}



public void Identifier() : { log("Identifier"); }
{
	<IDENTIFIER>
}


public void Literal() : { log("Literal"); }
{
	NullLiteral() | 
	BooleanLiteral() |
	NumericLiteral() |
	StringLiteral() |
	RegExLiteral()
}

public void NullLiteral() : { log("NullLiteral"); }
{
	<NULL>
}

public void BooleanLiteral() : { log("BooleanLiteral"); }
{
	<TRUE> |
	<FALSE>
}

public void NumericLiteral() : { log("NumericLiteral"); }
{
	<DECIMAL_LITERAL> |
	<HEX_INTEGER_LITERAL>
}

public void StringLiteral() : { log("StringLiteral"); }
{
	<STRING_LITERAL>
}

public void RegExLiteral() : { log("RegExLiteral"); }
{
	<REGEX_LITERAL>
}

/*
 * Expressions
 */

public void PrimaryExpression() : { log("PrimaryExpression"); }
{
	<THIS> |
	Identifier() |
	Literal() |
	ArrayLiteral() |
	ObjectLiteral() |
	<LPAREN> Expression() <RPAREN>
}

public void ArrayLiteral() : { log("ArrayLiteral"); }
{
	<LBRACKET> (ElementList())? <RBRACKET>
}

public void ElementList() : { log("ElementList"); }
{
	(Elsion())? AssignmentExpression() ( <COMMA> (Elsion())? AssignmentExpression() )*
}

public void Elsion() : { log("Elsion"); }
{
	( <COMMA> )+
}

public void ObjectLiteral() : { log("ObjectLiteral"); }
{
	<LBRACE> ( PropertyNameAndValueList() )* <RBRACE>
}

public void PropertyNameAndValueList() : { log("PropertyNameAndValueList"); }
{
	PropertyName() <COLON> AssignmentExpression() ( <COMMA> PropertyName() <COLON> AssignmentExpression() )*
}

public void PropertyName() : { log("PropertyName"); }
{
	Identifier() |
	StringLiteral() |
	NumericLiteral()
}

public void MemberExpression() : { log("MemberExpression"); }
{
	( PrimaryExpression() | FunctionExpression() ) ( <LBRACKET> Expression() <RBRACKET> | <DOT> Identifier() )* |
	<NEW> MemberExpression() Arguments()
}

public void NewExpression() : { log("NewExpression"); }
{
	LOOKAHEAD ( 3 ) MemberExpression() |
	<NEW> NewExpression()
}

public void CallExpression() : { log("CallExpression"); }
{
	MemberExpression() Arguments() ( Arguments()  | <LBRACKET> Expression() <RBRACKET> | <DOT> Identifier() )*
}

public void Arguments() : { log("Arguments"); }
{
	LOOKAHEAD ( 2 ) <LPAREN> <RPAREN> |
	<LPAREN> ArgumentList() <RPAREN>
}

public void ArgumentList() : { log("ArgumentList"); }
{
	AssignmentExpression() ( <COMMA> AssignmentExpression() )*
}

public void LeftHandSideExpression() : { log("LeftHandSideExpression"); }
{
	
	LOOKAHEAD ( MemberExpression() <LPAREN> ) CallExpression() | 
	NewExpression()
}

public void PostfixExpression() : { log("PostfixExpression"); }
{
	LeftHandSideExpression() ( LOOKAHEAD ( 2 ) <INC> | <DEC> )?
}

public void UnaryExpression() : { log("UnaryExpression"); }
{
	PostfixExpression() |
	<DELETE> UnaryExpression() |
	<VOID> UnaryExpression() |
	<TYPEOF> UnaryExpression() |
	<INC> UnaryExpression() |
	<DEC> UnaryExpression() |
	<PLUS> UnaryExpression() |
	<MINUS> UnaryExpression() |
	<BNOT> UnaryExpression() |
	<NOT> UnaryExpression()
}

public void MultiplicativeExpression() : { log("MultiplicativeExpression"); }
{
	UnaryExpression() ( ( <MULT> | <DIV> | <MOD> ) UnaryExpression() )*
}

public void AdditiveExpression() : { log("AdditiveExpression"); }
{
	MultiplicativeExpression() ( LOOKAHEAD ( 2 ) ( <PLUS> | <MINUS> ) MultiplicativeExpression() )*
}

public void ShiftExpression() : { log("ShiftExpression"); }
{
	AdditiveExpression() ( ( <LSHIFT> | <RSHIFT> | <URSHIFT> ) AdditiveExpression() )*
}

public void RelationalExpression() : { log("RelationalExpression"); }
{
	ShiftExpression() ( ( <LT> | <GT> | <LTE> | <GTE> | <INSTANCEOF> | <IN> ) ShiftExpression() )*
}

public void RelationalExpressionNoIn() : { log("RelationalExpressionNoIn"); }
{
	ShiftExpression() ( ( <LT> | <GT> | <LTE> | <GTE> | <INSTANCEOF> ) ShiftExpression() )*
}

public void EqualityExpression() : { log("EqualityExpression"); }
{
	RelationalExpression() ( ( <EQUAL> | <NOT_EQUAL> | <EEQUAL> | <NOT_EEQUAL> ) RelationalExpression() )*
}

public void EqualityExpressionNoIn() : { log("EqualityExpressionNoIn"); }
{
	RelationalExpressionNoIn() ( ( <EQUAL> | <NOT_EQUAL> | <EEQUAL> | <NOT_EEQUAL> ) RelationalExpressionNoIn() )*
}

public void BitwiseANDExpression() : { log("BitwiseANDExpression"); }
{
	EqualityExpression() ( <BAND> EqualityExpression() )*
}

public void BitwiseANDExpressionNoIn() : { log("BitwiseANDExpressionNoIn"); }
{
	EqualityExpressionNoIn() ( <BAND> EqualityExpressionNoIn() )*
}

public void BitwiseXORExpression() : { log("BitwiseXORExpression"); }
{
	BitwiseANDExpression() ( <XOR> BitwiseANDExpression() )*
}

public void BitwiseXORExpressionNoIn() : { log("BitwiseXORExpressionNoIn"); }
{
	BitwiseANDExpressionNoIn() ( <XOR> BitwiseANDExpressionNoIn() )*
}

public void BitwiseORExpression() : { log("BitwiseORExpression"); }
{
	BitwiseXORExpression() ( <BOR> BitwiseXORExpression() )*
}

public void BitwiseORExpressionNoIn() : { log("BitwiseORExpressionNoIn"); }
{
	BitwiseXORExpressionNoIn() ( <BOR> BitwiseXORExpression() )*
}

public void LogicalANDExpression() : { log("LogicalANDExpression"); }
{
	BitwiseORExpression() ( <AND> BitwiseORExpression() )*
}

public void LogicalANDExpressionNoIn() : { log("LogicalANDExpressionNoIn"); }
{
	BitwiseORExpressionNoIn() ( <AND> BitwiseORExpressionNoIn() )*
}

public void LogicalORExpression() : { log("LogicalORExpression"); }
{
	LogicalANDExpression() ( <OR> LogicalANDExpression() )*
}

public void LogicalORExpressionNoIn() : { log("LogicalORExpressionNoIn"); }
{
	LogicalANDExpressionNoIn() ( <OR> LogicalANDExpressionNoIn() )*
}

public void ConditionalExpression() : { log("ConditionalExpression"); }
{
	LogicalORExpression() ( LOOKAHEAD ( 2 ) <QUESTION> AssignmentExpression() <COLON> AssignmentExpression() )*
}

public void ConditionalExpressionNoIn() : { log("ConditionalExpressionNoIn"); }
{
	LogicalORExpressionNoIn() ( LOOKAHEAD ( 2 ) <QUESTION> AssignmentExpressionNoIn() <COLON> AssignmentExpressionNoIn() )*
}

public void AssignmentExpression() : { log("AssignmentExpression"); }
{
	LOOKAHEAD ( LeftHandSideExpression() AssignmentOperator() ) LeftHandSideExpression() AssignmentOperator() AssignmentExpression() | 
	ConditionalExpression()
}

public void AssignmentExpressionNoIn() : { log("AssignmentExpressionNoIn"); }
{
	LOOKAHEAD ( LeftHandSideExpression() AssignmentOperator() ) LeftHandSideExpression() AssignmentOperator() AssignmentExpressionNoIn() |
	ConditionalExpressionNoIn()
}

public void AssignmentOperator() : { log("AssignmentOperator"); }
{
	<ASSIGN> |
	<MULT_ASSIGN> |
	<DIV_ASSIGN> |
	<MOD_ASSIGN> |
	<PLUS_ASSIGN> |
	<MINUS_ASSIGN> |
	<LSHIFT_ASSIGN> |
	<RSHIFT_ASSIGN> |
	<URSHIFT_ASSIGN> |
	<BAND_ASSIGN> |
	<XOR_ASSIGN> |
	<BOR_ASSIGN>
}

public void Expression() : { log("Expression"); }
{
	AssignmentExpression() ( <COMMA> AssignmentExpression() )*
}

public void ExpressionNoIn() : { log("ExpressionNoIn"); }
{
	AssignmentExpressionNoIn() ( <COMMA> AssignmentExpressionNoIn() )*
}



/*
 * Statements
 */

public void Statement() : { log("Statement"); }
{
	LOOKAHEAD ( 3 ) Block() |
	VariableStatement() |
	EmptyStatement() |
	ExpressionStatement() |
	IfStatement() |
	IterationStatement() |
	ContinueStatement() |
	BreakStatement() |
	ReturnStatement() |
	WithStatement() |
	LabelledStatement() |
	SwitchStatement() |
	ThrowStatement() |
	TryStatement() | 
	DebuggerStatement()
}

public void Block() : { log("Block"); }
{
	<LBRACE> ( StatementList() )? <RBRACE>
}

public void StatementList() : { log("StatementList"); }
{
	( Statement() )+
}

public void VariableStatement() : { log("VariableStatement"); }
{
	<VAR> VariableDeclarationList() ( LOOKAHEAD( <SEMICOLON> ) <SEMICOLON> )?
}

public void VariableDeclarationList() : { log("VariableDeclarationList"); }
{
	VariableDeclaration() ( <COMMA> VariableDeclaration() )* 
}

public void VariableDeclarationListNoIn() : { log("VariableDeclarationListNoIn"); }
{
	VariableDeclarationNoIn() ( <COMMA> VariableDeclarationNoIn() ) *
}

public void VariableDeclaration() : { log("VariableDeclaration"); }
{
	Identifier() (Initializer())?
}

public void VariableDeclarationNoIn() : { log("VariableDeclarationNoIn"); }
{
	Identifier() (InitializerNoIn())?
}

public void Initializer() : { log("Initializer"); }
{
	<ASSIGN> AssignmentExpression()
}

public void InitializerNoIn() : { log("InitializerNoIn"); }
{
	<ASSIGN> AssignmentExpressionNoIn()
}

public void EmptyStatement() : { log("EmptyStatement"); }
{
	<SEMICOLON>
}

public void ExpressionStatement() : { log("ExpressionStatement"); }
{
	LOOKAHEAD ( { getToken(1).kind != LBRACE && 
					getToken(1).kind != COMMA &&
					getToken(1).kind != FUNCTION  } )
	Expression() ( LOOKAHEAD( <SEMICOLON> ) <SEMICOLON> )?
}

public void IfStatement() : { log("IfStatement"); }
{
	<IF> <LPAREN> Expression() <RPAREN> Statement() ( LOOKAHEAD ( 2 ) <ELSE> Statement() )?
}

public void IterationStatement() : { log("IterationStatement"); }
{
	<DO> Statement() <WHILE> <LPAREN> Expression() <RPAREN> <SEMICOLON> |
	<WHILE> <LPAREN> Expression() <RPAREN> Statement() |

	<FOR> <LPAREN>
	(
		LOOKAHEAD ( (ExpressionNoIn())? <SEMICOLON> ) (ExpressionNoIn())? <SEMICOLON> (Expression())? <SEMICOLON> (Expression())? |
		LOOKAHEAD ( <VAR> VariableDeclarationListNoIn() <SEMICOLON> ) <VAR> VariableDeclarationListNoIn() <SEMICOLON> (Expression())? <SEMICOLON> (Expression())? |
		LOOKAHEAD ( <VAR> LeftHandSideExpression() ) <VAR> LeftHandSideExpression() <IN> Expression() |
		LOOKAHEAD ( LeftHandSideExpression() ) LeftHandSideExpression() <IN> Expression()
	)
	<RPAREN> Statement()
}

public void ContinueStatement() : { log("ContinueStatement"); }
{
	<CONTINUE> (Identifier())? <SEMICOLON>
}

public void BreakStatement() : { log("BreakStatement"); }
{
	<BREAK> (Identifier())? <SEMICOLON>
}

public void ReturnStatement() : { log("ReturnStatement"); }
{
	<RETURN> (Expression())? <SEMICOLON>
}

public void WithStatement() : { log("WithStatement"); }
{
	<WITH> <LPAREN> Expression() <LPAREN> Statement()
}

public void SwitchStatement() : { log("SwitchStatement"); }
{
	<SWITCH> <LPAREN> Expression() <RPAREN> CaseBlock()
}

public void CaseBlock() : { log("CaseBlock"); }
{
	<LBRACE> (CaseClauses())? ( DefaultClause() (CaseClauses())? )? <RBRACE>
}

public void CaseClauses() : { log("CaseClauses"); }
{
	( CaseClause() )+
}

public void CaseClause() : { log("CaseClause"); }
{
	<CASE> Expression() <COLON> (StatementList())?
}

public void DefaultClause() : { log("DefaultClause"); }
{
	<_DEFAULT> <COLON> (StatementList())?
}

public void LabelledStatement() : { log("LabelledStatement"); }
{
	Identifier() <COLON> Statement()
}

public void ThrowStatement() : { log("ThrowStatement"); }
{
	<THROW> Expression() <SEMICOLON>
}

public void TryStatement() : { log("TryStatement"); }
{
	LOOKAHEAD (3) <TRY> Block() Catch() |
	LOOKAHEAD (3) <TRY> Block() Finally() |
	LOOKAHEAD (3) <TRY> Block() Catch() Finally()
}

public void Catch() : { log("Catch"); }
{
	<CATCH> <LPAREN> Identifier() <RPAREN> Block()
}

public void Finally() : { log("Finally"); }
{
	<FINALLY> Block()
}

public void DebuggerStatement() : {}
{
	<DEBUGGER> <SEMICOLON>
}

/*
 * Functions and Programs
 */

public void FunctionDeclaration() : { log("FunctionDeclaration"); }
{
	<FUNCTION> Identifier() <LPAREN> (FormalParameterList())? <RPAREN> <LBRACE> FunctionBody() <RBRACE>
}

public void FunctionExpression() : { log("FunctionExpression"); }
{
	<FUNCTION> (Identifier())? <LPAREN> (FormalParameterList())? <RPAREN> <LBRACE> FunctionBody() <RBRACE>
}

public void FormalParameterList() : { log("FormalParameterList"); }
{
	Identifier() ( <COMMA> Identifier() )*
}

public void FunctionBody() : { log("FunctionBody"); }
{
	SourceElements()
}

public void	Program() : { log("Program"); }
{
	SourceElements()
}

public void SourceElements() : { log("SourceElements"); }
{
	( SourceElement() )*
}

public void SourceElement() : { log("SourceElement"); }
{
	Statement() |
	FunctionDeclaration()
}
