
// TODO: Full Unicode Support
options
{
	STATIC = false;
	UNICODE_INPUT = true;
	DEBUG_PARSER = true;
//	LOOKAHEAD = 3;

	// JJTree Options
//	MULTI = true;
//	TRACK_TOKENS = true;
//	NODE_CLASS = "parser.ASTNode";
//	VISITOR = true;
	NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(JavascriptParser)
package parser;

public class JavascriptParser
{

	JavascriptParser() {
		this.disable_tracing();
	}

	public void setTracing(boolean trace) {
		if (trace)
			this.enable_tracing();
		else
			this.disable_tracing();
	}

}

PARSER_END(JavascriptParser)

/*
 * Whitespace
 */
<DEFAULT, IGNORE_REGEX>
SKIP : 
{
	< [ "\t", /*"\v", "\f",*/ " ", "\r", "\n" ] >
}

/*
 * Comments
 */

< DEFAULT, IGNORE_REGEX >
SKIP : 
{
	< "//" (~["\n","\r"])* >
}

< DEFAULT, IGNORE_REGEX >
SKIP :
{
	"/*" : COMMENT
}

< COMMENT >
SKIP :
{
	"*/" : DEFAULT
}

< COMMENT >
SKIP : 
{
	< ~[] >
}

/*
 * Reserved Words
 */

< DEFAULT, IGNORE_REGEX >
TOKEN : 
{
	< ABSTRACT : "abstract" > : DEFAULT |
	< BOOLEAN : "boolean" > : DEFAULT |
	< BREAK : "break" > : DEFAULT |
	< BYTE : "byte" > : DEFAULT |
	< CASE : "case" > : DEFAULT |
	< CATCH : "catch" > : DEFAULT |
	< CHAR : "char" > : DEFAULT |
	< CLASS : "class" > : DEFAULT |
	< CONTINUE : "continue" > : DEFAULT |
	< CONST : "const" > : DEFAULT |
	< DEBUGGER : "debugger" > : DEFAULT |
	< _DEFAULT : "default" > : DEFAULT |
	< DELETE : "delete" > : DEFAULT |
	< DO : "do" > : DEFAULT |
	< DOUBLE : "double" > : DEFAULT |
	< ELSE : "else" > : DEFAULT |
	< ENUM : "enum" > : DEFAULT |
	< EXPORT : "export" > : DEFAULT |
	< EXTENDS : "extends" > : DEFAULT |
	< FALSE : "false" > : DEFAULT |
	< FINAL : "final" > : DEFAULT |
	< FINALLY : "finally" > : DEFAULT |
	< FLOAT : "float" > : DEFAULT |
	< FOR : "for" > : DEFAULT |
	< FUNCTION : "function" > : DEFAULT |
	< GOTO : "goto" > : DEFAULT |
	< IF : "if" > : DEFAULT |
	< IMPLEMENTS : "implements" > : DEFAULT |
	< IN : "in" > : DEFAULT |
	< INSTANCEOF : "instanceof" > : DEFAULT |
	< INT : "int" > : DEFAULT |
	< INTERFACE : "interface" > : DEFAULT |
	< IS : "is" > : DEFAULT |
	< LONG : "long" > : DEFAULT |
	< NATIVE : "native" > : DEFAULT |
	< NEW : "new" > : DEFAULT |
	< NULL : "null" > : DEFAULT |
	< PACKAGE : "package" > : DEFAULT |
	< PRIVATE : "private" > : DEFAULT |
	< PROTECTED : "protected" > : DEFAULT |
	< RETURN : "return" > : DEFAULT |
	< SHORT : "short" > : DEFAULT |
	< STATIC : "static" > : DEFAULT |
	< SUPER : "super" > : DEFAULT |
	< SWITCH : "switch" > : DEFAULT |
	< SYNCHRONIZED : "synchronized" > : DEFAULT |
	< THIS : "this" > : DEFAULT |
	< THROW : "throw" > : DEFAULT |
	< THROWS : "throws" > : DEFAULT |
	< TRANSIENT : "transient" > : DEFAULT |
	< TRUE : "true" > : DEFAULT |
	< TRY : "try" > : DEFAULT |
	< TYPEOF : "typeof" > : DEFAULT |
	< VAR : "var" > : DEFAULT |
	< VOID : "void" > : DEFAULT |
	< VOLATILE : "volatile" > : DEFAULT |
	< WHILE : "while" > : DEFAULT |
	< WITH : "with" > : DEFAULT
}

/*
 * Operators
 */
< DEFAULT, IGNORE_REGEX >
TOKEN :
{
	< DOT : "." > : DEFAULT |
	< PLUS : "+" > : DEFAULT |
	< MINUS : "-" > : DEFAULT |
	< MULT : "*" > : DEFAULT |
	< DIV : "/" > : DEFAULT |
	< MOD : "%" > : DEFAULT |
	< INC : "++" > : DEFAULT |
	< DEC : "--" > : DEFAULT |
	< ASSIGN : "=" > : DEFAULT |
	< PLUS_ASSIGN : "+=" > : DEFAULT |
	< MINUS_ASSIGN : "-=" > : DEFAULT |
	< MULT_ASSIGN : "*=" > : DEFAULT |
	< DIV_ASSIGN : "/=" > : DEFAULT |
	< MOD_ASSIGN : "%=" > : DEFAULT |
	< LSHIFT_ASSIGN : "<<=" > : DEFAULT |
	< RSHIFT_ASSIGN : ">>=" > : DEFAULT |
	< URSHIFT_ASSIGN : ">>>=" > : DEFAULT |
	< BAND_ASSIGN : "&=" > : DEFAULT |
	< BOR_ASSIGN : "|=" > : DEFAULT |
	< XOR_ASSIGN : "^=" > : DEFAULT |
	< EQUAL : "==" > : DEFAULT |
	< EEQUAL : "===" > : DEFAULT |
	< NOT_EQUAL : "!=" > : DEFAULT |
	< NOT_EEQUAL : "!==" > : DEFAULT |
	< LT : "<" > : DEFAULT |
	< GT : ">" > : DEFAULT |
	< LTE : "<=" > : DEFAULT |
	< GTE : ">=" > : DEFAULT |	
	< BAND : "&" > : DEFAULT |
	< AND : "&&" > : DEFAULT |
	< BOR : "|" > : DEFAULT |
	< OR : "||" > : DEFAULT |
	< XOR : "^" > : DEFAULT |
	< BNOT : "~" > : DEFAULT |
	< NOT : "!" > : DEFAULT |
	< LPAREN : "(" > : DEFAULT |
	< RPAREN : ")" > : IGNORE_REGEX |
	< LBRACKET : "[" > : DEFAULT |
	< RBRACKET : "]" > : DEFAULT |
	< LBRACE : "{" > : DEFAULT |
	< RBRACE : "}" > : DEFAULT |
	< QUESTION : "?" > : DEFAULT |
	< COLON : ":" > : DEFAULT |
	< SEMICOLON : ";" > : DEFAULT |
	< LSHIFT : "<<" > : DEFAULT |
	< RSHIFT : ">>" > : DEFAULT |
	< URSHIFT : ">>>" > : DEFAULT |
	< COMMA : "," > : DEFAULT
}

/*
 * Complex Tokens
 */
< DEFAULT, IGNORE_REGEX >
TOKEN :
{

	// Identifiers
	< IDENTIFIER : <IDENTIFIER_START> (<IDENTIFIER_START> | <IDENTIFIER_CHAR>)* > : IGNORE_REGEX |
	< #IDENTIFIER_START : ( [ "$","_","A"-"Z","a"-"z" ] )> |
	< #IDENTIFIER_CHAR : ( [ "$","_","A"-"Z","a"-"z","0"-"9" ] ) > |

	// Numeric Literals
	< DECIMAL_LITERAL : (
		<DECIMAL_INTEGER_LITERAL> <DOT> (<DECIMAL_DIGITS>)? (<EXPONENT_PART>)? | 
		<DOT> <DECIMAL_DIGITS> (<EXPONENT_PART>)? |
		<DECIMAL_INTEGER_LITERAL> (<EXPONENT_PART>)? ) > : IGNORE_REGEX |
	
	< #DECIMAL_INTEGER_LITERAL : ( "0" | <NON_ZERO_DIGIT> (<DECIMAL_DIGITS>)? ) > |
	< #DECIMAL_DIGITS : ( <DECIMAL_DIGIT> )+ > |
	< #DECIMAL_DIGIT : ( [ "0"-"9" ] ) > |
	< #NON_ZERO_DIGIT : ( [ "1"-"9" ] ) > |
	< #EXPONENT_PART : ( <EXPONENT_INDICATOR> <SIGNED_INTEGER> ) > |
	< #EXPONENT_INDICATOR : ( "e" | "E" ) > |
	< #SIGNED_INTEGER : ( <DECIMAL_DIGITS> | <PLUS> <DECIMAL_DIGITS> | <MINUS> <DECIMAL_DIGITS> ) > |

	< HEX_INTEGER_LITERAL : ( ( "0x" | "0X") ( <HEX_DIGIT> )+ ) > : DEFAULT |
	< #HEX_DIGIT : ( [ "0"-"9", "a"-"f", "A"-"F" ] ) > |


	// String Literals
	< STRING_LITERAL : ( "\"" <DOUBLE_QUOTED_STRING_CHARS> "\"" | "'" <SINGLE_QUOTED_STRING_CHARS> "'" ) > : DEFAULT |
	< #DOUBLE_QUOTED_STRING_CHARS : ( <DOUBLE_QUOTED_STRING_CHAR> | <ESCAPE_SEQUENCE> )* > |
	< #DOUBLE_QUOTED_STRING_CHAR : ( ~["\\", "\"", "\r", "\n"] ) > |

	< #SINGLE_QUOTED_STRING_CHARS : ( <SINGLE_QUOTED_STRING_CHAR> | <ESCAPE_SEQUENCE> )* > |
	< #SINGLE_QUOTED_STRING_CHAR : ( ~["\\", "'", "\r", "\n"] ) > |

	< #ESCAPE_SEQUENCE : ( "\\" ( <CHARACTER_ESCAPE_SEQUENCE> | <HEX_ESCAPE_SEQUENCE> | <UNICODE_ESCAPE_SEQUENCE> ) ) > |
	< #CHARACTER_ESCAPE_SEQUENCE : ( <SINGLE_ESCAPE_CHARACTER> | <HEX_ESCAPE_SEQUENCE> | <UNICODE_ESCAPE_SEQUENCE> ) > |
	< #SINGLE_ESCAPE_CHARACTER : ["'", "\"", "\\", "b", "f", "n", "r", "t", "v"] > |
	< #HEX_ESCAPE_SEQUENCE : ( "x" <HEX_DIGIT> <HEX_DIGIT> ) > |
	< #UNICODE_ESCAPE_SEQUENCE: ( "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> ) >
}

< DEFAULT >
TOKEN : 
{
	// Regex Literals
	// TODO: Revisit when refactoring lexemes for unicode.
	< REGEX_LITERAL : ("/" <REGEX_BODY> "/" ( <REGEX_FLAGS> )? ) > : DEFAULT |
	< #REGEX_BODY : ( <REGEX_FIRST_CHAR> <REGEX_CHARS> ) > |
	< #REGEX_CHARS : ( <REGEX_CHAR> )* > |
	< #REGEX_FIRST_CHAR : ( ~["\r", "\n", "*", "/", "\\"] | <BACKSLASH_SEQUENCE> ) > |
	< #REGEX_CHAR : ( ~[ "\r", "\n", "/", "\\" ] | <BACKSLASH_SEQUENCE> ) > |
	< #BACKSLASH_SEQUENCE : ("\\" ~[ "\r", "\n"] ) > |
	< #REGEX_FLAGS : ( <IDENTIFIER_CHAR> )* >
}


public void Identifier() #void :
{
	Token t = null;
}
{
	t = <IDENTIFIER> { jjtree.pushNode(new Identifier(t.image)); } |

	/* The following reserved words can be used as identifiers as they do not have any special meaning */
	t = <IS> { jjtree.pushNode(new Identifier(t.image)); }

}


public void Literal() #void : { }
{
	NullLiteral() | 
	BooleanLiteral() |
	NumericLiteral() |
	StringLiteral() |
	RegExLiteral()
}

public void NullLiteral() #void : { }
{
	<NULL>
	{ jjtree.pushNode(new Literal(Literal.NULL, null)); }
}

public void BooleanLiteral() #void : { Token t = null; }
{
	(
		t = <TRUE> |
		t = <FALSE>
	)
	{ jjtree.pushNode(new Literal(Literal.BOOLEAN, t.image)); }
}

public void NumericLiteral() #void : { Token t = null; }
{
	(
		t = <DECIMAL_LITERAL> |
		t = <HEX_INTEGER_LITERAL>
	)
	{ jjtree.pushNode(new Literal(Literal.NUMBER, t.image)); }
}

public void StringLiteral() #void : { Token t = null; }
{
	t = <STRING_LITERAL>
	{ jjtree.pushNode(new Literal(Literal.STRING, t.image)); }
}

public void RegExLiteral() #void : { Token t = null; }
{
	t = <REGEX_LITERAL>
	{ jjtree.pushNode(new Literal(Literal.REGEX, t.image)); }
}

/*
 * Expressions
 */

public void PrimaryExpression() #void : { }
{
	(
		<THIS> { jjtree.pushNode(new Identifier("this")); } |
		Identifier() |
		Literal() |
		ArrayLiteral() |
		ObjectLiteral() |
		<LPAREN> Expression() <RPAREN>
	)
	{ jjtree.pushNode(new PrimaryExpression(jjtree.popNode())); }
}

public void ArrayLiteral() #void :
{
	Node elements = null;
}
{
	(
		<LBRACKET>
		(
			ElementList()
			{ elements = jjtree.popNode(); }
		)?
		<RBRACKET>
	)
	{ jjtree.pushNode(new Literal(Literal.ARRAY, elements)); }
}

public void ElementList() #void :
{
	Node elements = new ElementList();
	int i=0;
}
{
	(
		(
			Elsion()
			{ elements.jjtAddChild(null, i++); }
		)*
		AssignmentExpression()
		{ elements.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			(
				Elsion()
				{ elements.jjtAddChild(null, i++); }
			)*
			AssignmentExpression()
			{ elements.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(elements); }
}

public void Elsion() #void: { }
{
	<COMMA>
}

public void ObjectLiteral() #void :
{
	Node properties = null;
}
{
	(
		<LBRACE>
		(
			PropertyNameAndValueList()
			{ properties = jjtree.popNode(); }
		)?
		<RBRACE>
	)
	{ jjtree.pushNode(new Literal(Literal.OBJECT, properties)); }
}

public void PropertyNameAndValueList() #void :
{
	Node properties = new PropertyList();
	int i=0;
}
{
	(
		PropertyNameAndValue()
		{ properties.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			PropertyNameAndValue()
			{ properties.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(properties); }
}

public void PropertyNameAndValue() #void :
{
	Node name = null;
	Node value = null;
}
{
	(
		PropertyName()
		{ name = jjtree.popNode(); }
		<COLON>
		AssignmentExpression()
		{ value = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new Property(name, value)); }
}

public void PropertyName() #void : { }
{
	Identifier() |
	StringLiteral() |
	NumericLiteral()
}


public void MemberOrCallExpression() #void :
{
	Node lhs = null;
	Node memberOrElementOrArguments = null;
}
{
	(
		(
			LOOKAHEAD ( <FUNCTION> ) FunctionExpression() | PrimaryExpression()
		)
		{ lhs = jjtree.popNode(); }
		
		(
			LOOKAHEAD ( <LBRACKET> | <DOT> ) MemberExpressionCont()
			{
				memberOrElementOrArguments = jjtree.popNode();
				lhs = new MemberExpression(lhs, memberOrElementOrArguments);
			} |
			LOOKAHEAD ( <LPAREN > ) Arguments()
			{
				memberOrElementOrArguments = jjtree.popNode();
				lhs = new CallExpression(lhs, memberOrElementOrArguments);
			}
		)*	)
	{ jjtree.pushNode(lhs); }
}

public void MemberExpressionCont() #void :
{
	Node node = null;
}
{
	// This rule is odd in that is pushes 2 nodes onto the node stack: the operator and the right operand
	(
		(
			<LBRACKET>
			Expression()
			{ node = jjtree.popNode(); }
			<RBRACKET>
		)
		{ jjtree.pushNode(new ElementAccess(node)); } |

		(
			<DOT>
			Identifier()
			{ node = jjtree.popNode(); }
		)
		{ jjtree.pushNode(new MemberAccess(node)); }
		
	)
}

public void NewExpression() #void :
{
	Node expression = null;
}
{
	(
		<NEW>
		MemberOrCallExpression()
		{ expression = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new NewExpression(expression)); }
}

public void Arguments() #void : { }
{
	// Must create an empty argument list when there are no arguments in a call.
	LOOKAHEAD ( 2 ) <LPAREN> <RPAREN> { jjtree.pushNode(new ArgumentList()); } |
	<LPAREN> ArgumentList() <RPAREN>
}

public void ArgumentList() #void :
{
	Node arguments = new ArgumentList();
	int i=0;
}
{
	(
		AssignmentExpression()
		{ arguments.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			AssignmentExpression()
			{ arguments.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(arguments); }
}

public void LeftHandSideExpression() #void : { }
{
	LOOKAHEAD ( <NEW> ) NewExpression() | 
	MemberOrCallExpression()
}

public void PostfixExpression() #void :
{
	Node lhs = null;
	Node operator = null;
}
{
	(
		LeftHandSideExpression()
		{ lhs = jjtree.popNode(); }
		(
			LOOKAHEAD ( 1 )
			PostfixOperator()
			{ operator = jjtree.popNode(); }
		)?
	)
	{
		if (lhs != null && operator != null)
			jjtree.pushNode(new PostfixExpression(lhs, operator));
		else
			jjtree.pushNode(lhs);
	}
}

public void PostfixOperator() #void : { Token t = null; }
{
	(
		t = <INC> |
		t = <DEC>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void UnaryExpression() #void :
{
	Node operator = null;
	Node operand = null;
}
{
	PostfixExpression() |
	(
		UnaryOperator()
		{ operator = jjtree.popNode(); }
		UnaryExpression()
		{
			operand = jjtree.popNode();
			jjtree.pushNode(new UnaryExpression(operator, operand));
		}
	)
}

public void UnaryOperator() #void : { Token t = null; }
{
	(
		t = <DELETE> |
		t = <VOID> |
		t = <TYPEOF> |
		t = <INC> |
		t = <DEC> |
		t = <PLUS> |
		t = <MINUS> |
		t = <BNOT> |
		t = <NOT>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void MultiplicativeExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	UnaryExpression()
	{ lhs = jjtree.popNode(); }
	(
		MultiplicativeOperator()
		{ operator = jjtree.popNode(); }
		
		UnaryExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void MultiplicativeOperator() #void : { Token t = null; }
{
	(
		t = <MULT> | 
		t = <DIV> | 
		t = <MOD>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void AdditiveExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	MultiplicativeExpression()
	{ lhs = jjtree.popNode(); }
	( 
		LOOKAHEAD ( 2 )
		(
			AdditiveOperator()
			{ operator = jjtree.popNode(); }
			
			MultiplicativeExpression()
			{
				rhs = jjtree.popNode();
				lhs = new InfixExpression(lhs, operator, rhs);
			}
		)
	)*
	{ jjtree.pushNode(lhs); }
}

public void AdditiveOperator() #void : { Token t = null; }
{
	(
		t = <PLUS> | 
		t = <MINUS>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void ShiftExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	AdditiveExpression()
	{ lhs = jjtree.popNode(); }
	(
		ShiftOperator()
		{ operator = jjtree.popNode(); }
		
		AdditiveExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void ShiftOperator() #void : { Token t = null; }
{
	( 
		t = <LSHIFT> | 
		t = <RSHIFT> | 
		t = <URSHIFT>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void RelationalExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	ShiftExpression()
	{ lhs = jjtree.popNode(); }
	(
		RelationalOperator()
		{ operator = jjtree.popNode(); }

		ShiftExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void RelationalOperator() #void : { Token t = null; }
{
	( 
		t = <LT> | 
		t = <GT> | 
		t = <LTE> | 
		t = <GTE> | 
		t = <INSTANCEOF> | 
		t = <IN>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void RelationalExpressionNoIn() #void : 
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	ShiftExpression()
	{ lhs = jjtree.popNode(); }
	(
		RelationalOperatorNoIn()
		{ operator = jjtree.popNode(); }
		
		ShiftExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void RelationalOperatorNoIn() #void : { Token t = null; }
{
	( 
		t = <LT> |
		t = <GT> |
		t = <LTE> |
		t = <GTE> |
		t = <INSTANCEOF>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void EqualityOperator() #void : { Token t = null; }
{
	(
		t = <EQUAL> |
		t = <NOT_EQUAL> |
		t = <EEQUAL> |
		t = <NOT_EEQUAL>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void EqualityExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	RelationalExpression()
	{ lhs = jjtree.popNode(); }
	(
		EqualityOperator() 
		{operator = jjtree.popNode(); }
		
		RelationalExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void EqualityExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	RelationalExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		EqualityOperator() 
		{operator = jjtree.popNode(); }
		
		RelationalExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseANDOperator() #void : { Token t = null; }
{
	t = <BAND>
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void BitwiseANDExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	EqualityExpression()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseANDOperator() 
		{operator = jjtree.popNode(); }
		
		EqualityExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseANDExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	EqualityExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseANDOperator() 
		{operator = jjtree.popNode(); }
		
		EqualityExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseXOROperator() #void : { Token t = null; }
{
	t = <XOR>
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void BitwiseXORExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseANDExpression()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseXOROperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseANDExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseXORExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseANDExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseXOROperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseANDExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseOROperator() #void : { Token t = null; }
{
	t = <BOR>
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void BitwiseORExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseXORExpression()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseOROperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseXORExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void BitwiseORExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseXORExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		BitwiseOROperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseXORExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void LogicalANDOperator() #void : { Token t = null; }
{
	t = <AND>
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void LogicalANDExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseORExpression()
	{ lhs = jjtree.popNode(); }
	(
		LogicalANDOperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseORExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void LogicalANDExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	BitwiseORExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		LogicalANDOperator() 
		{operator = jjtree.popNode(); }
		
		BitwiseORExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void LogicalOROperator() #void : { Token t = null; }
{
	t = <OR>
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void LogicalORExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	LogicalANDExpression()
	{ lhs = jjtree.popNode(); }
	(
		LogicalOROperator() 
		{operator = jjtree.popNode(); }
		
		LogicalANDExpression()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}

public void LogicalORExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	LogicalANDExpressionNoIn()
	{ lhs = jjtree.popNode(); }
	(
		LogicalOROperator() 
		{operator = jjtree.popNode(); }
		
		LogicalANDExpressionNoIn()
		{
			rhs = jjtree.popNode();
			lhs = new InfixExpression(lhs, operator, rhs);
		}
	)*
	{ jjtree.pushNode(lhs); }
}


public void ConditionalExpression() #void :
{
	Node condition = null;
	Node trueExpression = null;
	Node falseExpression = null;
}
{
	LogicalORExpression()
	{ condition = jjtree.popNode(); }
	(
		LOOKAHEAD ( <QUESTION> )
		<QUESTION>
		AssignmentExpression()
		{ trueExpression = jjtree.popNode(); }
		<COLON>
		AssignmentExpression()
		{
			falseExpression = jjtree.popNode();
			condition = new ConditionalExpression(condition, trueExpression, falseExpression);
		}
	)*
	{ jjtree.pushNode(condition); }
}

public void ConditionalExpressionNoIn() #void :
{
	Node condition = null;
	Node trueExpression = null;
	Node falseExpression = null;
}
{
	LogicalORExpressionNoIn()
	{ condition = jjtree.popNode(); }
	(
		LOOKAHEAD ( <QUESTION> )
		<QUESTION>
		AssignmentExpressionNoIn()
		{ trueExpression = jjtree.popNode(); }
		<COLON>
		AssignmentExpression()
		{
			falseExpression = jjtree.popNode();
			condition = new ConditionalExpression(condition, trueExpression, falseExpression);
		}
	)*
	{ jjtree.pushNode(condition); }
}

public void AssignmentExpression() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	LOOKAHEAD ( LeftHandSideExpression() AssignmentOperator() )
	LeftHandSideExpression()
	{ lhs = jjtree.popNode(); }
	
	AssignmentOperator()
	{ operator = jjtree.popNode(); }
	
	AssignmentExpression()
	{
		rhs = jjtree.popNode();
		jjtree.pushNode(new AssignmentExpression(lhs, operator, rhs));
	}

	| ConditionalExpression()
}

public void AssignmentExpressionNoIn() #void :
{
	Node lhs = null;
	Node operator = null;
	Node rhs = null;
}
{
	LOOKAHEAD ( LeftHandSideExpression() AssignmentOperator() ) 
	LeftHandSideExpression()
	{ lhs = jjtree.popNode(); }
	 
	AssignmentOperator()
	{ operator = jjtree.popNode(); }
	 
	AssignmentExpressionNoIn()
	{
		rhs = jjtree.popNode();
		jjtree.pushNode(new AssignmentExpression(lhs, operator, rhs));
	}

	| ConditionalExpressionNoIn()
}

public void AssignmentOperator() #void : { Token t = null;}
{
	(
		t = <ASSIGN> |
		t = <MULT_ASSIGN> |
		t = <DIV_ASSIGN> |
		t = <MOD_ASSIGN> |
		t = <PLUS_ASSIGN> |
		t = <MINUS_ASSIGN> |
		t = <LSHIFT_ASSIGN> |
		t = <RSHIFT_ASSIGN> |
		t = <URSHIFT_ASSIGN> |
		t = <BAND_ASSIGN> |
		t = <XOR_ASSIGN> |
		t = <BOR_ASSIGN>
	)
	{ jjtree.pushNode(new Operator(t.image)); }
}

public void Expression() #void :
{
	Expression expression = new Expression();
	int i=0;
}
{
	(
		AssignmentExpression()
		{ expression.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			AssignmentExpression()
			{ expression.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(expression); }
}

public void ExpressionNoIn() #void :
{
	Expression expression = new Expression();
	int i=0;
}
{
	(
		AssignmentExpressionNoIn()
		{ expression.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			AssignmentExpressionNoIn()
			{ expression.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(expression); }
}


/*
 * Statements
 */

public void Statement() #void : { }
{
	LOOKAHEAD ( <LBRACE> ) Block() |
	// TODO: LINT Warning - Function Declarations should only appear at the SourceElement level
	LOOKAHEAD ( <FUNCTION> <IDENTIFIER> ) FunctionDeclaration() |
	VariableStatement() |
	EmptyStatement() |
	ExpressionStatement() |
	IfStatement() |
	IterationStatement() |
	ContinueStatement() |
	BreakStatement() |
	ReturnStatement() |
	WithStatement() |
	LabelledStatement() |
	SwitchStatement() |
	ThrowStatement() |
	TryStatement() | 
	DebuggerStatement()
}

public void Block() #void :
{
	Node statements = null;
}
{
	(
		<LBRACE>
		(
			StatementList()
			{ statements = jjtree.popNode(); }
		)?
		<RBRACE>
	)
	{ jjtree.pushNode(new Block(statements)); }
}

public void StatementList() #void :
{
	Node statements = new StatementList();
	int i=0;
}
{
	(
		Statement()
		{ statements.jjtAddChild(jjtree.popNode(), i++); }
	)+
	{ jjtree.pushNode(statements); }
}

public void VariableStatement() #void :
{
	Node variableDeclarations = null;
}
{
	(
		<VAR>
		VariableDeclarationList()
		{ variableDeclarations = jjtree.popNode(); }

		( LOOKAHEAD( <SEMICOLON> ) <SEMICOLON> )?
	)
	{ jjtree.pushNode(new VariableStatement(variableDeclarations)); }
}

public void VariableDeclarationList() #void :
{
	Node variableDeclarations = new VariableDeclarationList();
	int i=0;
}
{
	(
		VariableDeclaration()
		{ variableDeclarations.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			VariableDeclaration()
			{ variableDeclarations.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(variableDeclarations); }
}

public void VariableDeclarationListNoIn() #void :
{
	Node variableDeclarations = new VariableDeclarationList();
	int i=0;
}
{
	(
		VariableDeclarationNoIn()
		{ variableDeclarations.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			VariableDeclarationNoIn()
			{ variableDeclarations.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(variableDeclarations); }
}

public void VariableDeclaration() #void :
{
	Node identifier = null;
	Node initializer = null;
}
{
	(
		Identifier()
		{ identifier = jjtree.popNode(); }
		(
			Initializer()
			{ initializer = jjtree.popNode(); }
		)?
	)
	{ jjtree.pushNode(new VariableDeclaration(identifier, initializer)); }
}

public void VariableDeclarationNoIn() #void :
{
	Node identifier = null;
	Node initializer = null;
}
{
	(
		Identifier()
		{ identifier = jjtree.popNode(); }
		(
			InitializerNoIn()
			{ initializer = jjtree.popNode(); }
		)?
	)
	{ jjtree.pushNode(new VariableDeclaration(identifier, initializer)); }
}

public void Initializer() #void : { }
{
	<ASSIGN> AssignmentExpression()
}

public void InitializerNoIn() #void : { }
{
	<ASSIGN> AssignmentExpressionNoIn()
}

public void EmptyStatement() #void : { }
{
	<SEMICOLON>
	{ jjtree.pushNode(new EmptyStatement()); }
}

public void ExpressionStatement() #void :
{
	Node expression = null;
}
{
	LOOKAHEAD ( { getToken(1).kind != LBRACE && 
					getToken(1).kind != COMMA &&
					getToken(1).kind != FUNCTION  } )
	(
		Expression()
		{ expression = jjtree.popNode(); }

		( LOOKAHEAD( <SEMICOLON> ) <SEMICOLON> )?
	)
	{ jjtree.pushNode(new ExpressionStatement(expression)); }
}

public void IfStatement() #void :
{
	Node expression = null;
	Node body = null;
	Node elseClause = null;
}
{
	(
		<IF>
		<LPAREN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		Statement()
		{ body = jjtree.popNode(); }
		(
			LOOKAHEAD ( 2 )
			<ELSE>
			Statement()
			{ elseClause = jjtree.popNode(); }
		)?
	)
	{ jjtree.pushNode(new IfStatement(expression, body, elseClause)); }
}

public void IterationStatement() #void : { }
{
	DoStatement() |
	WhileStatement() | 
	LOOKAHEAD ( <FOR> <LPAREN> (ForStatementInitializer())? <SEMICOLON> ) ForStatement() | 
	ForInStatement()
}

public void DoStatement() #void :
{
	Node body = null;
	Node expression = null;
}
{
	(
		<DO>
		Statement()
		{ body = jjtree.popNode(); }
		<WHILE>
		<LPAREN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		<SEMICOLON>
	)
	{ jjtree.pushNode(new DoStatement(body, expression)); }
		
}

public void WhileStatement() #void :
{
	Node expression = null;
	Node body = null;
}
{
	(
		<WHILE>
		<LPAREN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		Statement()
		{ body = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new WhileStatement(expression, body)); }
}

public void ForStatement() #void :
{
	Node initializer = null;
	Node condition = null;
	Node step = null;
	Node body = null;
}
{
	(
		<FOR>
		<LPAREN>
		(
			ForStatementInitializer()
			{ initializer = jjtree.popNode(); }
		)?
		<SEMICOLON>
		(
			ForStatementCondition()
			{ condition = jjtree.popNode(); }
		)?
		<SEMICOLON>
		(
			ForStatementStep()
			{ step = jjtree.popNode(); }
		)?
		<RPAREN>
		Statement()
		{ body = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new ForStatement(initializer, condition, step, body)); }
}

public void ForStatementInitializer() #void : { }
{
	LOOKAHEAD ( <VAR> ) <VAR> VariableDeclarationListNoIn() | 
	ExpressionNoIn()
}

public void ForStatementCondition() #void : {}
{
	Expression()
}

public void ForStatementStep() #void : {}
{
	Expression()
}

public void ForInStatement() #void :
{
	Node initializer = null;
	Node expression = null;
	Node body = null;
}
{
	(
		<FOR>
		<LPAREN>
		(
			ForInStatementInitializer()
			{ initializer = jjtree.popNode(); }
		)?
		<IN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		Statement()
		{ body = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new ForInStatement(initializer, expression, body)); }
}

public void ForInStatementInitializer() #void : { }
{
	LOOKAHEAD ( <VAR> ) <VAR> VariableDeclarationListNoIn() | 
	LeftHandSideExpression()
}

public void ContinueStatement() #void :
{
	Node identifier = null;
}
{
	(
		<CONTINUE>
		(
			LOOKAHEAD ( <IDENTIFIER> )
			Identifier()
			{ identifier = jjtree.popNode(); }
		)? 
		(
			LOOKAHEAD ( <SEMICOLON> )
			<SEMICOLON>
		)?
	)
	{ jjtree.pushNode(new ContinueStatement(identifier)); }
}

public void BreakStatement() #void:
{
	Node identifier = null;
}
{
	(
		<BREAK>
		(
			LOOKAHEAD ( <IDENTIFIER> )
			Identifier()
			{ identifier = jjtree.popNode(); }
		)? 
		(
			LOOKAHEAD ( <SEMICOLON> )
			<SEMICOLON>
		)?
	)
	{ jjtree.pushNode(new BreakStatement(identifier)); }
}

public void ReturnStatement() #void :
{
	Node expression = null;
}
{
	(
		<RETURN>
		(
			LOOKAHEAD ( <SEMICOLON> ) <SEMICOLON> |
			(
				Expression()
				{ expression = jjtree.popNode(); }
				
				( LOOKAHEAD ( <SEMICOLON> ) <SEMICOLON> )?
			)
		)?
	)
	{ jjtree.pushNode(new ReturnStatement(expression)); }
}

public void WithStatement() #void :
{
	Node expression = null;
	Node body = null;
}
{
	(
		<WITH>
		<LPAREN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		Statement()
		{ body = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new WithStatement(expression, body)); }
}

public void SwitchStatement() #void :
{
	Node expression = null;
	Node caseBlock = null;
}
{
	(
		<SWITCH>
		<LPAREN>
		Expression()
		{ expression = jjtree.popNode(); }
		<RPAREN>
		CaseBlock()
		{ caseBlock = jjtree.popNode(); }
	)
	{ jjtree.pushNode(new SwitchStatement(expression, caseBlock)); }
}

public void CaseBlock() #void :
{
	Node caseBlock = new CaseBlock();
	int i = 0;
}
{
	(
		<LBRACE>
		(
			CaseClause()
			{ caseBlock.jjtAddChild(jjtree.popNode(), i++); }
		)*
		(
			DefaultClause()
			{ caseBlock.jjtAddChild(jjtree.popNode(), i++); }
			(
				CaseClause()
				{ caseBlock.jjtAddChild(jjtree.popNode(), i++); }
			)*
		)?
		<RBRACE>
	)
	{ jjtree.pushNode(caseBlock); }
}

public void CaseClause() #void :
{
	Node expression = null;
	Node body = null;
}
{
	(
		<CASE>
		Expression()
		{ expression = jjtree.popNode(); }
		<COLON>
		(
			StatementList()
			{ body = jjtree.popNode(); }
		)?
	)
	{ jjtree.pushNode(new CaseClause(expression, body)); }
}

public void DefaultClause() #void :
{
	Node body = null;
}
{
	(
		<_DEFAULT>
		<COLON>
		(
			StatementList()
			{ body = jjtree.popNode(); }
		)?
	)
	{ jjtree.pushNode(new DefaultClause(body)); }
}

public void LabelledStatement() #void :
{
	Node identifier = null;
	Node statement = null;
}
{
	Identifier()
	{ identifier = jjtree.popNode(); } 
	
	<COLON> Statement()
	{
		statement = jjtree.popNode();
		jjtree.pushNode(new LabelledStatement(identifier, statement));
	}
}

public void ThrowStatement() #void :
{
	Node expression = null;
}
{
	<THROW> Expression() { expression = jjtree.popNode(); } <SEMICOLON>
	{ jjtree.pushNode(new ThrowStatement(expression)); }
}

public void TryStatement() #void :
{
	Node block = null;
	Node catchBlock = null;
	Node finallyBlock = null;
}
{
	(
		<TRY>
		Block()
		{ block = jjtree.popNode(); }
		( 
			LOOKAHEAD ( Finally() )
			Finally()
			{ finallyBlock = jjtree.popNode(); } |
			
			Catch()
			{ catchBlock = jjtree.popNode(); }
			(
				Finally()
				{ finallyBlock = jjtree.popNode(); }
			)?
		)
	)
	{
		jjtree.pushNode(new TryStatement(block, catchBlock, finallyBlock));
	}
}

public void Catch() #void :
{
	Node identifier = null;
	Node block = null;
}
{
	<CATCH>
	
	<LPAREN> Identifier() <RPAREN>
	{ identifier = jjtree.popNode(); }
	 
	Block()
	{
		block = jjtree.popNode();
		jjtree.pushNode(new CatchClause(identifier, block));
	}
}

public void Finally() #void: { }
{
	<FINALLY> Block()
}

public void DebuggerStatement() #void: {}
{
	<DEBUGGER> <SEMICOLON>
	{ jjtree.pushNode(new DebuggerStatement()); }
}

/*
 * Functions and Programs
 */

public void FunctionDeclaration() #void :
{
	Node identifier = null;
	Node parameters = null;
	Node body = null;
}
{
	(
		<FUNCTION> 
		Identifier()
		{ identifier = jjtree.popNode(); }
		<LPAREN>
		(
			FormalParameterList()
			{ parameters = jjtree.popNode(); }
		)?
		<RPAREN>
		<LBRACE>
		FunctionBody()
		{ body = jjtree.popNode(); }
		<RBRACE>
	)
	{ jjtree.pushNode(new FunctionDeclaration(identifier, parameters, body)); }
}

public void FunctionExpression() #void :
{
	Node identifier = null;
	Node parameters = null;
	Node body = null;
}
{
	(
		<FUNCTION>
		(
			Identifier()
			{ identifier = jjtree.popNode(); }
		)?
		<LPAREN>
		(
			FormalParameterList()
			{ parameters = jjtree.popNode(); }
		)?
		<RPAREN>
		<LBRACE>
		FunctionBody()
		{ body = jjtree.popNode(); }
		<RBRACE>
	)
	{ jjtree.pushNode(new FunctionExpression(identifier, parameters, body)); }
}

public void FormalParameterList() #void :
{
	Node parameters = new ParameterList();
	int i = 0;
}
{
	(
		Identifier()
		{ parameters.jjtAddChild(jjtree.popNode(), i++); }
		(
			<COMMA>
			Identifier()
			{ parameters.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(parameters); }
}

public void FunctionBody() #void : { }
{
	SourceElements()
}

public Node Program() #void : { }
{
	SourceElements()
	{ return jjtree.peekNode(); }
}

public void SourceElements() #void :
{
	Node elements = new SourceElements();
	int i=0;
}
{
	(
		(
			SourceElement()
			{ elements.jjtAddChild(jjtree.popNode(), i++); }
		)*
	)
	{ jjtree.pushNode(elements); }
}

public void SourceElement() #void : { }
{
	Statement()
}
